sum(s2)
# Loading library and dataset
library(dslabs)
# Vectors - basic building blocks of dataframes, used to store data.
# Each column of dataframe is a vector
# Create a vector with concatenate function c()
codes <- c(380, 124, 818)
codes
# Create character vector.
# Without quotes character will be taken as variable names
country <- c("italy", "canada", "egypt")
# Names of vectors
codes <- c(italy = 380, canada = 124, egypt = 818)
codes
# Class is still numeric
class(codes)
# But with names accessed using names() function
names(codes)
# Another way to declare vector with names
# Now quotes using quotes is same as before
codes <- c("italy" = 380, "canada" = 124, "egypt" = 818)
codes
# Assign names using names function
codes <- c(380, 124, 818)
country <- c("italy","canada","egypt")
names(codes) <- country
codes
# Sequences also create vetors
seq(1, 10)
seq(1, 10, 2)
1:10
class(1:10)
class(seq(1, 10, 0.5))
# Subsetting
codes[2]
# Accessing multiple enteries by using vector as index
codes[c(1,3)]
# Or by using sequence
codes[1:2]
# Using names single or multiple
codes["canada"]
codes[c("egypt","italy")]
# Vector Coercion
x <- c(1,"canada",3)
x
# 1 and 3 converted to character. R coerced data to character
class(x)
x <- 1:5
y <- as.character(x)
class(y)
y <- as.numeric(y)
class(y)
x <- c("1","b","3")
as.numeric(x)
# NA introduced by coercion
#Loading library and dataset
library(dslabs)
# Sorting
data(murders)
# Sorting by murders
sort(murders$total)
# Get states sorted my murders
ind <- order(murders$total)
murders$state[ind]
# in a single line
murders$state[order(murders$total)]
# max
max(murders$total)
# which.max index of max
which.max(murders$total)
murders$state[which.max(murders$total)]
# Rank
x <- c(31, 4, 15, 92, 65)
rank(x)
# Recycling in case of length mismatch
x <- c(1,2,3)
y <- c(10, 20, 30, 40, 50, 60, 70)
x+y
#Loading library and dataset
library(dslabs)
# Vector Arthimetics
# Operations on vectors occur element wise
inches <- c(69, 62, 66, 70, 70, 73, 67, 73, 67, 70)
inches * 2.54
inches - 69
murder_rate <- murders$total / murders$population * 100000
# State with highest murder rate
murders$state[order(murder_rate)]
murders$state[order(murder_rate,decreasing = TRUE)]
x <- c(2, 43, 27, 96, 18)
rank(x)
order(x)
sort(x)
?order
50/60
10/60
(0.8/10)*60
(4/50)*60
(3.1/30)*60
# Indexing Vectors
index = murder_rate < 0.71
index = murder_rate <= 0.71
# Indexing Vectors
index = murder_rate < 0.71
index
index = murder_rate <= 0.71
index
murders$state[index]
sum(index)
west <- murders$region == "West"
safe <- murder_rate <= 1
ind <- safe & west
murders$state[ind]
# Which used to get index of row matching condition
ind <- which(murders$state == "California")
murder_rate[ind]
atch each of the entries of a first vector:
ind <- match(c("New York", "Florida", "Texas"), murders$state)
ind
# match unction tells us which indexes of a second vector
# match each of the entries of a first vector:
ind <- match(c("New York", "Florida", "Texas"), murders$state)
ind
c("Boston", "Dakota", "Washington") %in% murders$state
# %in% function used when If rather than an index we want a logical that tells us
# whether or not each element of a first vector is in a second vector
c("Boston", "Dakota", "Washington") %in% murders$state
match(c("New York", "Florida", "Texas"), murders$state)
which(murders$state%in%c("New York", "Florida", "Texas"))
#Loading library and dataset
library(dslabs)
# Vectors - basic building blocks of dataframes, used to store data.
# Each column of dataframe is a vector
# Create a vector with concatenate function c()
codes <- c(380, 124, 818)
codes
# Create character vector.
# Without quotes character will be taken as variable names
country <- c("italy", "canada", "egypt")
# Names of vectors
codes <- c(italy = 380, canada = 124, egypt = 818)
codes
# Class is still numeric
class(codes)
# But with names accessed using names() function
names(codes)
# Another way to declare vector with names
# Now quotes using quotes is same as before
codes <- c("italy" = 380, "canada" = 124, "egypt" = 818)
codes
# Assign names using names function
codes <- c(380, 124, 818)
country <- c("italy","canada","egypt")
names(codes) <- country
codes
# Sequences also create vetors
seq(1, 10)
seq(1, 10, 2)
1:10
class(1:10)
class(seq(1, 10, 0.5))
# Subsetting
codes[2]
# Accessing multiple enteries by using vector as index
codes[c(1,3)]
# Or by using sequence
codes[1:2]
# Using names single or multiple
codes["canada"]
codes[c("egypt","italy")]
# Vector Coercion
x <- c(1,"canada",3)
x
# 1 and 3 converted to character. R coerced data to character
class(x)
x <- 1:5
y <- as.character(x)
class(y)
y <- as.numeric(y)
class(y)
# NA introduced by coercionte
x <- c("1","b","3")
as.numeric(x)
# Sorting
data(murders)
# Sorting by murders
sort(murders$total)
# Get states sorted my murders
ind <- order(murders$total)
murders$state[ind]
# in a single line
murders$state[order(murders$total)]
# max
max(murders$total)
# which.max index of max
which.max(murders$total)
murders$state[which.max(murders$total)]
# Rank
x <- c(31, 4, 15, 92, 65)
rank(x)
# Recycling in case of length mismatch
x <- c(1,2,3)
y <- c(10, 20, 30, 40, 50, 60, 70)
x+y
# Vector Arthimetics
# Operations on vectors occur element wise
inches <- c(69, 62, 66, 70, 70, 73, 67, 73, 67, 70)
inches * 2.54
inches - 69
murder_rate <- murders$total / murders$population * 100000
# State with highest murder rate
murders$state[order(murder_rate,decreasing = TRUE)]
# Indexing Vectors
index = murder_rate < 0.71
index = murder_rate <= 0.71
murders$state[index]
sum(index)
# Logical indexing
west <- murders$region == "West"
safe <- murder_rate <= 1
ind <- safe & west
murders$state[ind]
# Which used to get index of row matching condition
ind <- which(murders$state == "California")
murder_rate[ind]
# match unction tells us which indexes of a second vector
# match each of the entries of a first vector:
ind <- match(c("New York", "Florida", "Texas"), murders$state)
ind
# %in% function used when If rather than an index we want a logical that tells us
# whether or not each element of a first vector is in a second vector
c("Boston", "Dakota", "Washington") %in% murders$state
match(c("New York", "Florida", "Texas"), murders$state)
which(murders$state%in%c("New York", "Florida", "Texas"))
packages(dplyr)
library(dplyr)
#Loading library and dataset
library(dslabs)
install.packages("dplyr")
library(dplyr)
#Loading library and dataset
library(dslabs)
#install.packages("dplyr")
library(dplyr)
#Get data
data(murders)
head(murders)
mutate(rate = total/population*100000)
#Loading library and dataset
library(dslabs)
#install.packages("dplyr")
library(dplyr)
#Get data
data(murders)
head(murders)
mutate(rate = total/population*100000)
mutate(murders,rate = total/population*100000)
filter(murders,rate<=0.71)
# One line way to add new column in dataframe
murders = mutate(murders,rate = total/population*100000)
filter(murders,rate<=0.71)
new_table = select(murders,state,region,rate)
filter(new_table, rate<=0.71)
murders %>% select(state,region,rate) %>% filter(rate<=0.71)
# Creating dataframes
grades = data.frame(names = c("John", "Juan", "Jean", "Yao"),
exam_1 = c(95, 80, 90, 85),
exam_2 = c(90, 85, 85, 90),
stringsAsFactors = FALSE)
class(grades$names)
# By deafault R creates string columns as factors
x <- murders$population / 10^6
y <- murders$total
plot(x, y)
hist(murders$rate)
boxplot(rate~region, data = murders)
library(dslabs)
data(heights)
options(digits = 3)
heights
avg = mean(heights$height)
ind = which(heights$height > avg)
sum(ind)
ind
ind = heights$height > avg
ind
sum(ind)
filter(heights,height>avg,sex=="Female")
a = heights$sex=="Female"
a
mean(a)
min(heights$sex)
min(heights$height)
match(min(heights$height),heights)
match(min(heights$height))
match(min(heights$height),height)
match(min(heights$height),heights)
View(heights)
match(max(heights$height),heights)
max(heights$height)
match(82.7,heights$height)
match(82.7,heights$height)
match(50,heights$height)
x <- min(heights$height):max(heights$height)
x
x <- min(heights$height)+ 1:max(heights$height)
x
min(heights$height)+ 1:max(heights$height)
min(heights$height):max(heights$height)
range(min(heights$height),max(heights$height))
range(min(heights$height)+1,max(heights$height))
range(min(heights$height)+1,max(heights$height),1)
range(min(heights$height),max(heights$height),1)
seq(1.2,6.1)
1.2:6.1
sum( x ! %in% heights$height)
sum( x !%in% heights$height)
sum( !(x %in% heights$height))
x %in% heights$height
sum(x %in% heights$height)
x
x <- min(heights$height):max(heights$height)
sum( !(x %in% heights$height))
x %in% heights$height
heights2 = heights$height*2.54
heights2
heights2[18]
mean(heights2)
heights2 = mutate(heights,height_cm=height*2.54)
filter(heights2,sex=="Female")
nrow(filter(heights2,sex=="Female"))
mean(filter(heights2,sex=="Female")$height)
mean(filter(heights2,sex=="Female")$height_cm)
library(dslabs)
data(olive)
head(olive)
plot(olive$palmitic,olive$palmitoleic)
hist(olive$eicosenoic)
boxplot(palmitic~region,data=olive)
boxplot(rate~region, data = murders)
# Conditionals
a <- 0
if(a!=0){
print(1/a)
} else{
print("No reciprocal for 0.")
}
# an example that tells us which states, if any, have a murder rate less than 0.5
library(dslabs)
data(murders)
murder_rate <- murders$total / murders$population*100000
ind <- which.min(murder_rate)
if(murder_rate[ind] < 0.5){
print(murders$state[ind])
} else{
print("No state has murder rate that low")
}
# Conditionals
a <- 0
if(a!=0){
print(1/a)
} else{
print("No reciprocal for 0.")
}
# an example that tells us which states, if any, have a murder rate less than 0.5
library(dslabs)
data(murders)
murder_rate <- murders$total / murders$population*100000
ind <- which.min(murder_rate)
if(murder_rate[ind] < 0.5){
print(murders$state[ind])
} else{
print("No state has murder rate that low")
}
# an example that tells us which states, if any, have a murder rate less than 0.5
library(dslabs)
data(murders)
murder_rate <- murders$total / murders$population*100000
ind <- which.min(murder_rate)
if(murder_rate[ind] < 0.5){
print(murders$state[ind])
} else{
print("No state has murder rate that low")
}
# an example that tells us which states, if any, have a murder rate less than 0.5
library(dslabs)
data(murders)
murder_rate <- murders$total / murders$population*100000
ind <- which.min(murder_rate)
if(murder_rate[ind] < 0.25){
print(murders$state[ind])
} else{
print("No state has murder rate that low")
}
# the ifelse() function is particularly useful on vectors
a <- c(0,1,2,-4,5)
result <- ifelse(a > 0, 1/a, NA)
# the ifelse() function is also helpful for replacing missing values
data(na_example)
no_nas <- ifelse(is.na(na_example), 0, na_example)
sum(is.na(no_nas))
# the ifelse() function is also helpful for replacing missing values
data(na_example)
sum(is.na(na_example))
no_nas <- ifelse(is.na(na_example), 0, na_example)
sum(is.na(no_nas))
# the any() and all() functions evaluate logical vectors
z <- c(TRUE, TRUE, FALSE)
any(z)
all(z)
any(z)
all(z)
avg <- function(x){
s <- sum(x)
n <- length(x)
s/n
}
# we see that the above function and the pre-built R mean() function are identical
x <- 1:100
identical(mean(x), avg(x))
# variables inside a function are not defined in the workspace
s <- 3
avg(1:10)
s
# the general form of a function
my_function <- function(VARIABLE_NAME){
perform operations on VARIABLE_NAME and calculate VALUE
VALUE
}
# functions can have multiple arguments as well as default values
avg <- function(x, arithmetic = TRUE){
n <- length(x)
ifelse(arithmetic, sum(x)/n, prod(x)^(1/n))
}
# creating a function that computes the sum of integers 1 through n
compute_s_n <- function(n){
x <- 1:n
sum(x)
}
# a very simple for-loop
for(i in 1:5){
print(i)
# a very simple for-loop
for(i in 1:5){
print(i)}
# a for-loop for our summation
m <- 25
s_n <- vector(length = m) # create an empty vector
for(n in 1:m){
s_n[n] <- compute_s_n(n)
}
# a very simple for-loop
for(i in 1:5){
print(i)}
# a for-loop for our summation
m <- 25
s_n <- vector(length = m) # create an empty vector
for(n in 1:m){
s_n[n] <- compute_s_n(n)
}
# a very simple for-loop
for(i in 1:5){
print(i)
}
# a very simple for-loop
for(i in 1:5){
print(i)
}
# a for-loop for our summation
m <- 25
s_n <- vector(length = m) # create an empty vector
for(n in 1:m){
s_n[n] <- compute_s_n(n)
}
# a table of values comparing our function to the summation formula
head(data.frame(s_n = s_n, formula = n*(n+1)/2))
# overlaying our function with the summation formula
plot(n, s_n)
lines(n, n*(n+1)/2)
# overlaying our function with the summation formula
plot(n, s_n)
lines(n, n*(n+1)/2)
# a table of values comparing our function to the summation formula
head(data.frame(s_n = s_n, formula = n*(n+1)/2))
# overlaying our function with the summation formula
plot(n, s_n)
lines(n, n*(n+1)/2)
n
# a for-loop for our summation
m <- 25
s_n <- vector(length = m) # create an empty vector
for(n in 1:m){
s_n[n] <- compute_s_n(n)
}
# a table of values comparing our function to the summation formula
head(data.frame(s_n = s_n, formula = n*(n+1)/2))
# overlaying our function with the summation formula
plot(n, s_n)
lines(n, n*(n+1)/2)
s_n
n <- 1:m
plot(n, s_n)
n <- 1:m
plot(n, s_n)
# a table of values comparing our function to the summation formula
head(data.frame(s_n = s_n, formula = n*(n+1)/2))
# overlaying our function with the summation formula
plot(n, s_n)
lines(n, n*(n+1)/2)
# overlaying our function with the summation formula
plot(n, s_n)
lines(n, n*(n+1)/2)
